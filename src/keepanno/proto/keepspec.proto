// Copyright (c) 2024, the R8 project authors. Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
syntax = "proto3";

package com.android.tools.r8.keepanno.proto;

// All messages are placed under the outer class. This makes it a bit nicer to
// implement the AST <-> Proto conversions without type conflicts.
option java_multiple_files = false;

// Camel-case the outer class name (default is `Keepspec`).
option java_outer_classname = "KeepSpecProtos";

// Java package consistent with R8 convention.
option java_package = "com.android.tools.r8.keepanno.proto";

// Top-level container for the keep specification
message KeepSpec {
  Version version = 1;
  repeated Declaration declarations = 2;
}

message Version {
  uint32 major = 1;
  uint32 minor = 2;
  uint32 patch = 3;
}

message Declaration {
  oneof decl_oneof {
    Edge edge = 2;
    Check check = 3;
  }
}

// Note: the messages and fields avoid the use of `descriptor` in any place as
// that name is used internally in the protobuf encodings. We consistently use
// the short-form `desc` throughout.

message Context {
  oneof context_oneof {
    TypeDesc class_desc = 1;
    MethodDesc method_desc = 2;
    FieldDesc field_desc = 3;
  }
}

message TypeDesc {
  string desc = 1;
}

message MethodDesc {
  string name = 1;
  TypeDesc holder = 2;
  TypeDesc returnType = 3;
  repeated TypeDesc parameterTypes = 4;
}

message FieldDesc {
  string name = 1;
  TypeDesc holder = 2;
  TypeDesc fieldType = 3;
}

message MetaInfo {
  Context context = 1;
  string description = 2;
}

enum CheckKind {
  CHECK_UNSPECIFIED = 0;
  CHECK_REMOVED = 1;
  CHECK_OPTIMIZED_OUT = 2;
}

message Check {
  MetaInfo meta_info = 1;
  CheckKind kind = 2;
  Bindings bindings = 3;
  BindingReference item = 4;
}

message Edge {
  MetaInfo meta_info = 1;
  // TODO(b/343389186): Add content.
}

message Bindings {
  repeated Binding bindings = 1;
}

message Binding {
  string name = 1;
  ItemPattern item = 2;
}

message BindingReference {
  string name = 1;
}

message ItemPattern {
  oneof item_oneof {
    ClassItemPattern class_item = 1;
    MemberItemPattern member_item = 2;
  }
}

message ClassItemPattern {
  ClassNamePattern class_name = 1;
  // TODO(b/343389186): Add instance-of.
  // TODO(b/343389186): Add annotated-by.
}

message ClassNamePattern {
  PackagePattern package = 1;
  UnqualifiedNamePattern unqualified_name = 2;
}

message PackagePattern {
  oneof package_oneof {
    // An unset oneof implies any package (including multiple package parts).
    StringPattern name = 1;
    PackageNode node = 2;
    // TODO(b/343389186): Rewrite package pattern AST to the tree structure.
    string exactPackageHack = 3;
  }
}

message PackageNode {
  PackagePattern lhs = 1;
  PackagePattern rhs = 2;
}

message StringPattern {
  // The string pattern is split in two so that we can distinguish the exact
  // empty string, from the inexact patterns.
  // An unset oneof implies any string.
  oneof pattern_oneof {
    StringPatternExact exact = 1;
    StringPatternInexact inexact = 2;
  }
}

message StringPatternExact {
  string exact = 1;
}

message StringPatternInexact {
  string prefix = 2;
  string suffix = 3;
}

message UnqualifiedNamePattern {
  StringPattern name = 1;
}

message MemberItemPattern {
  // TODO(b/343389186): Add content.
}

